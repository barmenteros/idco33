AWSTemplateFormatVersion: '2010-09-09'
Description: 'IAM Roles and Policies for MQL5 Prompt Enrichment Middleware - Task A1'

Parameters:
  ProjectName:
    Type: String
    Default: 'mql5-rag'
    Description: 'Project name used for resource naming and tagging'
    AllowedPattern: '^[a-z0-9-]+$'
    ConstraintDescription: 'Must contain only lowercase letters, numbers, and hyphens'
  
  S3BucketName:
    Type: String
    Default: 'mql5-rag-faiss-index'
    Description: 'S3 bucket name for storing FAISS index files'
    AllowedPattern: '^[a-z0-9.-]+$'
    ConstraintDescription: 'Must be a valid S3 bucket name'
  
  DynamoDBTableName:
    Type: String
    Default: 'mql5-doc-snippets'
    Description: 'DynamoDB table name for storing documentation snippets'
    AllowedPattern: '^[a-zA-Z0-9_.-]+$'
    ConstraintDescription: 'Must be a valid DynamoDB table name'

Resources:
  # Lambda Execution Role for RAG Handler
  MQL5RAGLambdaExecutionRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectName}-lambda-execution-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: 'S3AccessPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                Resource: 
                  - !Sub 'arn:aws:s3:::${S3BucketName}/*'
              - Effect: Allow
                Action:
                  - 's3:ListBucket'
                Resource: 
                  - !Sub 'arn:aws:s3:::${S3BucketName}'
        - PolicyName: 'DynamoDBReadPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:DescribeTable'
                Resource: 
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTableName}'
        - PolicyName: 'CloudWatchLogsPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                Resource: 
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ProjectName}-*'
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/${ProjectName}-*:*'
        - PolicyName: 'CloudWatchMetricsPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudwatch:PutMetricData'
                Resource: '*'
                Condition:
                  StringEquals:
                    'cloudwatch:namespace': !Sub '${ProjectName}/RAG'
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Component
          Value: Lambda-Execution-Role

  # CodeBuild Service Role for Monthly Ingestion
  MQL5RAGCodeBuildServiceRole:
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: !Sub '${ProjectName}-codebuild-service-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: 'sts:AssumeRole'
      Policies:
        - PolicyName: 'S3FullAccessPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:GetObjectVersion'
                  - 's3:PutObject'
                  - 's3:PutObjectAcl'
                  - 's3:DeleteObject'
                Resource: 
                  - !Sub 'arn:aws:s3:::${S3BucketName}/*'
              - Effect: Allow
                Action:
                  - 's3:ListBucket'
                  - 's3:GetBucketLocation'
                Resource: 
                  - !Sub 'arn:aws:s3:::${S3BucketName}'
        - PolicyName: 'DynamoDBFullAccessPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:PutItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:BatchWriteItem'
                  - 'dynamodb:GetItem'
                  - 'dynamodb:BatchGetItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                  - 'dynamodb:DescribeTable'
                Resource: 
                  - !Sub 'arn:aws:dynamodb:${AWS::Region}:${AWS::AccountId}:table/${DynamoDBTableName}'
        - PolicyName: 'CloudWatchLogsPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogGroups'
                  - 'logs:DescribeLogStreams'
                Resource: 
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${ProjectName}-*'
                  - !Sub 'arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/${ProjectName}-*:*'
        - PolicyName: 'CloudWatchMetricsPolicy'
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudwatch:PutMetricData'
                Resource: '*'
                Condition:
                  StringEquals:
                    'cloudwatch:namespace': !Sub '${ProjectName}/Ingestion'
      Tags:
        - Key: Project
          Value: !Ref ProjectName
        - Key: Component
          Value: CodeBuild-Service-Role

Outputs:
  LambdaExecutionRoleArn:
    Description: 'ARN of the Lambda execution role for MQL5 RAG Handler'
    Value: !GetAtt MQL5RAGLambdaExecutionRole.Arn
    Export:
      Name: !Sub '${ProjectName}-lambda-execution-role-arn'
  
  LambdaExecutionRoleName:
    Description: 'Name of the Lambda execution role'
    Value: !Ref MQL5RAGLambdaExecutionRole
    Export:
      Name: !Sub '${ProjectName}-lambda-execution-role-name'
  
  CodeBuildServiceRoleArn:
    Description: 'ARN of the CodeBuild service role for ingestion pipeline'
    Value: !GetAtt MQL5RAGCodeBuildServiceRole.Arn
    Export:
      Name: !Sub '${ProjectName}-codebuild-service-role-arn'
  
  CodeBuildServiceRoleName:
    Description: 'Name of the CodeBuild service role'
    Value: !Ref MQL5RAGCodeBuildServiceRole
    Export:
      Name: !Sub '${ProjectName}-codebuild-service-role-name'
  
  ProjectName:
    Description: 'Project name for reference by other stacks'
    Value: !Ref ProjectName
    Export:
      Name: !Sub '${ProjectName}-project-name'